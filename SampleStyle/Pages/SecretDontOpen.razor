@page "/secret"

<h1>#Blazor HTML/CSS Rendering <input type="number" min="20" max=@(MAXCOUNT) @bind=@count step="20" /> Lines</h1>

<div style="position:relative;width:100%;height:100%;overflow:hidden;">
    @for (int i = 0; i < count; i++)
    {
        int _i = i;
        <HtmlLine @key="_i"
                  X1=@(x1[_i])
                  Y1=@(y1[_i])
                  X2=@(x2[_i])
                  Y2=@(y2[_i])
                  ZIndex=@(z[_i])
                  Colour=@(colour(_i))
                  TransitionDuration=@(ds[_i])
                  Units="%"
                  LineWidth=@($"{w[_i]}px") />
    }
</div>

@code
{
    int[] x1, y1, x2, y2, h, d, dt, z, w;
    System.Threading.CancellationTokenSource ct;
    const int MAXCOUNT = 2400;
    int _count = 80;
    int _oldCount = 0;
    int count { get => _count; set { _count = value; Configure(); } }
    string[] ds;
    Random rng;
    Task animate;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        rng = new Random();
        x1 = new int[MAXCOUNT];
        y1 = new int[MAXCOUNT];
        x2 = new int[MAXCOUNT];
        y2 = new int[MAXCOUNT];
        h = new int[MAXCOUNT];
        z = new int[MAXCOUNT];
        w = new int[MAXCOUNT];
        d = new int[MAXCOUNT];
        dt = new int[MAXCOUNT];
        ds = new string[MAXCOUNT];
        ct = new System.Threading.CancellationTokenSource();
        Configure();
        animate = Animate(ct.Token);
    }
    void Configure()
    {
        for (int i = _oldCount; i < count; i++)
        {

            x1[i] = rng.Next(0, 100);
            x2[i] = rng.Next(0, 100);
            y1[i] = rng.Next(0, 100);
            y2[i] = rng.Next(0, 100);
            h[i] = rng.Next(0, 256);
            z[i] = rng.Next(0, 256);
            w[i] = (int)(z[i] / 10 + 1);
            d[i] = 1;
            dt[i] = d[i] * 1000;
            ds[i] = $"{d[i]}s";
            int _i = i;
        }
        _oldCount = count;
    }
    private string colour(int i) => $"hsla({h[i]},70%,70%,1)";

    private async Task Animate(System.Threading.CancellationToken cToken)
    {
        System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
        sw.Start();
        await Task.Delay(100);
        bool update = false;
        while (!cToken.IsCancellationRequested)
        {
            update = false;
            for (int index = 0; index < count; index++)
            {
                if (dt[index] <= 0)
                {
                    x1[index] = rng.Next(0, 100);
                    x2[index] = rng.Next(0, 100);
                    y1[index] = rng.Next(0, 100);
                    y2[index] = rng.Next(0, 100);
                    h[index] = rng.Next(0, 256);
                    z[index] = rng.Next(0, 256);
                    w[index] = (int)(z[index] / 10 + 1);
                    d[index] = rng.Next(1, 13);
                    dt[index] = d[index] * 1000;
                    ds[index] = $"{d[index]}s";
                    update = true;
                }
                else
                {
                    dt[index] -= (int)sw.ElapsedMilliseconds;
                }

            }
            sw.Restart();
            if (update)
            {
                await InvokeAsync(StateHasChanged);
            }
            await Task.Delay(100);
        }
    }
}